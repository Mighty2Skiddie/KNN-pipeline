# -*- coding: utf-8 -*-
"""KNN pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19S0DFuXUkRBJkJQHMKRNFR9TXqbn1GYe
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('gene_expression.csv')

df.head()

df.describe()

df.shape

sns.scatterplot(x='Gene One',y='Gene Two',data=df,hue='Cancer Present')
plt.xlim(2,6)
plt.ylim(6,10)

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

X=df.drop('Cancer Present',axis=1)
y=df['Cancer Present']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

scaler=StandardScaler()

scaled_X_train=scaler.fit_transform(X_train)
scaled_X_test=scaler.transform(X_test)

from sklearn.neighbors import KNeighborsClassifier

knn_model=KNeighborsClassifier(n_neighbors=6)

knn_model.fit(scaled_X_train,y_train)

y_pred=knn_model.predict(scaled_X_test)

from sklearn.metrics import classification_report,confusion_matrix,accuracy_score

accuracy_score(y_test,y_pred)

print(classification_report(y_test,y_pred))

test_error_rates=[]
for k in range(1,30):
    knn_model=KNeighborsClassifier(n_neighbors=k)
    knn_model.fit(scaled_X_train,y_train)

    y_pred=knn_model.predict(scaled_X_test)

    test_error=1-accuracy_score(y_test,y_pred)
    test_error_rates.append(test_error)

plt.plot(range(1,30),test_error_rates)
plt.xlabel('K')
plt.ylabel('Error Rate')

knn_model=KNeighborsClassifier(n_neig)
knn_model.get_params().keys()

operations=[('scaler',scaler),('knn',knn_model)]

from sklearn.pipeline import Pipeline
pipe=Pipeline(operations)

from sklearn.model_selection import GridSearchCV

k_values=list(range(1,20))

Param_grid={'knn__n_neighbors':k_values}

full_cv_classifier=GridSearchCV(pipe,param_grid=Param_grid,cv=5,scoring='accuracy')

full_cv_classifier.fit(X_train,y_train)

full_cv_classifier.best_estimator_.get_params()

full_cv_classifier.cv_results_.keys()

scaler=StandardScaler()

knn16=KNeighborsClassifier(n_neighbors=16)

operations=[('scaler'),('scaler'),('knn16',knn16)]

pipe=Pipeline(operations)

pipe.fit(X_train,y_train)

pipe_pred=pipe.predict(X_test)

print(classification_report(y_test,pipe_pred))

